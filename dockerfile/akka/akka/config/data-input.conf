akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
   
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    serializers {
      java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
    }
  }
  
  
  remote {
    log-remote-lifecycle-events = off
    transport-failure-detector {
       acceptable-heartbeat-pause = 200 s
    }
    watch-failure-detector {
       implementation-class = "akka.remote.PhiAccrualFailureDetector"
       threshold = 10.0
       heartbeat-interval = 1 s
       max-sample-size = 200
       min-std-deviation = 100 ms
       acceptable-heartbeat-pause = 10 s
       unreachable-nodes-reaper-interval = 1s
       expected-response-after = 3 s
    }
    retry-gate-closed-for = 3 s      
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2551
      send-buffer-size = 2560000b
      receive-buffer-size = 2560000b
      maximum-frame-size = 52428800b
      backlog = 4096
      tcp-nodelay = on
      tcp-keepalive = on
      tcp-reuse-addr = off-for-windows
      connection-timeout = 10 s
   
    }
  }
  
  cluster {
    gossip-interval = 1 s
    gossip-time-to-live = 2 s
    leader-actions-interval = 1 s
    retry-unsuccessful-join-after = 5 s
    seed-nodes = ["akka.tcp://DataInputServer@127.0.0.1:2551"]
    roles=["trade"]
    failure-detector {
      implementation-class = "akka.remote.PhiAccrualFailureDetector"
      heartbeat-interval = 1 s
      threshold = 6.0
      max-sample-size = 1000
      min-std-deviation = 100 ms
      acceptable-heartbeat-pause = 30 s
      monitored-by-nr-of-members = 5
      expected-response-after = 5 s
    } 
  }
}

akka.kafka.producer {
  parallelism = 100
  close-timeout = 60s
  use-dispatcher = "akka.kafka.default-dispatcher"
  kafka-clients {
  }
}

http {
  interface = "0.0.0.0"
  port = 9090
}

common {
  sec = " "
}

rpc {
  path = "akka.tcp://RpcForActor@flink:12551/user/rpcActor"
}

log {
  type = "file"
  file_path = "/opt/akka/data/log.log"
  sleeptime = "1000"
  port_server = "/opt/akka/data/port.txt"
}

kafka_producer {
  uri = "kafka:9092"
  topic = "test"
}

kafka_consumer {
  uri = "kafka:9092"
  topic = "wanda_sit,wanda_prod,wanda_uat,wanda_test"
}

cors.allowed-origin = "*"